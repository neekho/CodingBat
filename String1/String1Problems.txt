
public String helloName(String name) ->

    Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".


        helloName("Bob") → "Hello Bob!"
        helloName("Alice") → "Hello Alice!"
        helloName("X") → "Hello X!"




public String makeOutWord(String out, String word) ->

    Given an "out" string length 4, such as "<<>>", and a word, 
    return a new string where the word is in the middle of the out string, e.g.
    "<<word>>". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.


        makeOutWord("<<>>", "Yay") → "<<Yay>>"
        makeOutWord("<<>>", "WooHoo") → "<<WooHoo>>"
        makeOutWord("[[]]", "word") → "[[word]]"


public String firstHalf(String str) ->

    Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".


        firstHalf("WooHoo") → "Woo"
        firstHalf("HelloThere") → "Hello"
        firstHalf("abcdef") → "abc"



public String nonStart(String a, String b) ->

    Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.


        nonStart("Hello", "There") → "ellohere"
        nonStart("java", "code") → "avaode"
        nonStart("shotl", "java") → "hotlava"


public String theEnd(String str, boolean front) ->

    Given a string, return a string length 1 from its front, unless front is false,
     in which case return a string length 1 from its back. The string will be non-empty.


        theEnd("Hello", true) → "H"
        theEnd("Hello", false) → "o"
        theEnd("oh", true) → "o"


public boolean endsLy(String str) ->

    Given a string, return true if it ends in "ly".

        endsLy("oddly") → true
        endsLy("y") → false
        endsLy("oddy") → false


public String middleThree(String str) ->

    Given a string of odd length, return the string length 3 from its middle, 
    so "Candy" yields "and". The string length will be at least 3.


        middleThree("Candy") → "and"
        middleThree("and") → "and"
        middleThree("solving") → "lvi"



public String lastChars(String a, String b) ->

    Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so "yo" and "java" yields "ya".
    If either string is length 0, use '@' for its missing char.


        lastChars("last", "chars") → "ls"
        lastChars("yo", "java") → "ya"
        lastChars("hi", "") → "h@"



public String extraFront(String str) ->

    Given a string, return a new string made of 3 copies of the first 2 chars of the original string.
    The string may be any length. If there are fewer than 2 chars, use whatever is there.


        extraFront("Hello") → "HeHeHe"
        extraFront("ab") → "ababab"
        extraFront("H") → "HHH"


public String startWord(String str, String word) ->

    Given a string and a second "word" string, we'll say that the word matches the string if it appears at the front of the string,
    except its first char does not need to match exactly.
    On a match, return the front of the string, or otherwise return the empty string.
    So, so with the string "hippo" the word "hi" returns "hi" and "xip" returns "hip". The word will be at least length 1.


        startWord("hippo", "hi") → "hi"
        startWord("hippo", "xip") → "hip"
        startWord("hippo", "i") → "h"